package me.friendly.exeter.module.impl.exploits;

import me.friendly.api.event.Listener;
import me.friendly.exeter.events.PacketEvent;
import me.friendly.exeter.events.TickEvent;
import me.friendly.exeter.module.ModuleType;
import me.friendly.exeter.module.ToggleableModule;
import me.friendly.api.properties.NumberProperty;
import me.friendly.api.properties.Property;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketKeepAlive;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class PingSpoof extends ToggleableModule {
    private final NumberProperty<Integer> time = new NumberProperty<>(200, 50, 10000, "Time", "delay");
    private final Property<Boolean> cof = new Property<>(true, "C0F", "confirmtransaction", "conftrans", "transpackets");

    private final Map<Long, Packet<?>> packetMap = new ConcurrentHashMap<>();

    public PingSpoof() {
        super("Ping Spoof", new String[]{"pingspoof", "spoofping", "badping"}, ModuleType.EXPLOITS);
        offerProperties(time, cof);

        listeners.add(new Listener<PacketEvent>("pingspoof_packet_listener") {
            @Override
            public void call(PacketEvent event) {
                if (event.getPacket() instanceof CPacketKeepAlive
                        || (event.getPacket() instanceof CPacketConfirmTransaction && cof.getValue())) {

                    packetMap.put(System.currentTimeMillis(), event.getPacket());
                    event.setCanceled(true);
                }
            }
        });

        listeners.add(new Listener<TickEvent>("pingspoof_tick_listener") {
            @Override
            public void call(TickEvent event) {
                setTag(time.getValue() + "ms" + ", " + packetMap.size());

                packetMap.forEach((t, packet) -> {
                    if (System.currentTimeMillis() - t >= time.getValue()) {
                        mc.player.connection.sendPacketSilent(packet);
                        packetMap.remove(t);
                    }
                });
            }
        });
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        packetMap.clear();
    }
}
