package me.friendly.exeter.module.impl.exploits;

import me.friendly.api.event.Listener;
import me.friendly.exeter.events.FoodFinishedEvent;
import me.friendly.exeter.events.PacketEvent;
import me.friendly.exeter.events.TickEvent;
import me.friendly.exeter.module.ModuleType;
import me.friendly.exeter.module.ToggleableModule;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayer.PositionRotation;
import net.minecraft.network.play.server.SPacketPlayerPosLook;

public class ChorusDelay extends ToggleableModule {
    private SPacketPlayerPosLook serverTp;

    private double x, y, z;
    private float yaw, pitch;

    private boolean consumed = false;

    public ChorusDelay() {
        super("Chorus Delay", new String[]{"choruscontrol", "chorusdelay"}, ModuleType.EXPLOITS);

        listeners.add(new Listener<TickEvent>("chorusdelay_tick_listener") {
            @Override
            public void call(TickEvent event) {
                if (mc.player.isSneaking() || mc.gameSettings.keyBindSneak.isKeyDown()) {
                    if (serverTp != null) {
                        mc.player.connection.sendPacketSilent(new CPacketConfirmTeleport(serverTp.teleportId));
                        mc.player.connection.sendPacketSilent(new PositionRotation(x, y, z, yaw, pitch, false));

                        serverTp = null;
                        consumed = false;
                    }
                }
            }
        });

        listeners.add(new Listener<PacketEvent>("chorusdelay_packet_listener") {
            @Override
            public void call(PacketEvent event) {

                if (consumed) {
                    if (event.getPacket() instanceof SPacketPlayerPosLook) {
                        serverTp = event.getPacket();
                        event.setCanceled(true);

                        x = mc.player.posX;
                        y = mc.player.getEntityBoundingBox().minY;
                        z = mc.player.posZ;

                        yaw = mc.player.rotationYaw;
                        pitch = mc.player.rotationPitch;
                    }

                    if (event.getPacket() instanceof CPacketPlayer && serverTp != null) {
                        event.setCanceled(true);
                    }
                }
            }
        });

        listeners.add(new Listener<FoodFinishedEvent>("chorusdelay_finishedfood_listener") {
            @Override
            public void call(FoodFinishedEvent event) {
                if (event.getStack().getItem().equals(Items.CHORUS_FRUIT)) {
                    consumed = true;
                }
            }
        });
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        serverTp = null;
        consumed = false;
    }
}
