package me.friendly.exeter.module.impl.exploits;

import me.friendly.api.event.Listener;
import me.friendly.api.minecraft.helper.MovementHelper;
import me.friendly.api.properties.NumberProperty;
import me.friendly.api.properties.Property;
import me.friendly.api.stopwatch.Stopwatch;
import me.friendly.exeter.core.Exeter;
import me.friendly.exeter.events.PacketEvent;
import me.friendly.exeter.module.ModuleType;
import me.friendly.exeter.module.ToggleableModule;
import net.minecraft.init.Items;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;

import java.util.Random;

// glorified bow bomb with funny bipass
public class FastProjectile extends ToggleableModule {
    private static final Random RNG = new Random();

    private final NumberProperty<Double> charge = new NumberProperty<>(10.0, 1.0, 100.0, "Charge", "boost", "funnynumber");
    private final NumberProperty<Double> delay = new NumberProperty<>(500.0, 0.0, 1000.0, "Delay", "d", "time");

    private final Property<Boolean> bows = new Property<>(true, "Bows", "bowandarrow");
    private final Property<Boolean> pearls = new Property<>(true, "Pearls", "enderpearls");
    private final Property<Boolean> snowballs = new Property<>(true, "Snowballs", "balls");
    private final Property<Boolean> eggs = new Property<>(true, "Eggs", "chickeneggs");

    private final Stopwatch stopwatch = new Stopwatch();

    public FastProjectile() {
        super("Fast Projectile", new String[]{"fastprojectile", "bowbomb"}, ModuleType.EXPLOITS);
        offerProperties(charge, delay, bows, pearls, snowballs, eggs);

        listeners.add(new Listener<PacketEvent>("fastprojectile_packet_listener") {
            @Override
            public void call(PacketEvent event) {
                if (!stopwatch.hasCompleted(delay.getValue().longValue())) {
                    return;
                }

                if (event.getPacket() instanceof CPacketPlayerDigging) {
                    CPacketPlayerDigging packet = event.getPacket();

                    if (packet.getAction().equals(Action.RELEASE_USE_ITEM)) {
                        ItemStack inUse = mc.player.getActiveItemStack();
                        if (inUse.getItem() instanceof ItemBow && bows.getValue()) {
                            doFunny();
                        }
                    }
                } else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
                    CPacketPlayerTryUseItem packet = event.getPacket();

                    ItemStack stack = Exeter.getInstance().getInventoryManager().getStack();
                    if (packet.getHand().equals(EnumHand.OFF_HAND)) {
                        stack = mc.player.getHeldItemOffhand();
                    }

                    if ((stack.getItem().equals(Items.ENDER_PEARL) && pearls.getValue())
                            || (stack.getItem().equals(Items.EGG) && eggs.getValue())
                            || (stack.getItem().equals(Items.SNOWBALL) && snowballs.getValue())) {
                        doFunny();
                    }
                }
            }
        });
    }

    private void doFunny() {
        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));

        double[] motion = MovementHelper.calcMotion(charge.getValue());

        if (RNG.nextBoolean()) {
            mc.player.connection.sendPacket(new Position(mc.player.posX + motion[0], mc.player.posY, mc.player.posZ + motion[1], mc.player.onGround));
            mc.player.connection.sendPacket(new Position(mc.player.posX - motion[0], mc.player.posY, mc.player.posZ - motion[1], mc.player.onGround));
        } else {
            mc.player.connection.sendPacket(new Position(mc.player.posX - motion[0], mc.player.posY, mc.player.posZ - motion[1], mc.player.onGround));
            mc.player.connection.sendPacket(new Position(mc.player.posX + motion[0], mc.player.posY, mc.player.posZ + motion[1], mc.player.onGround));
        }

        stopwatch.reset();
    }
}
